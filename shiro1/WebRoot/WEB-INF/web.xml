<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>shiro1</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <!-- 1.Spring 配置 -->
    <!-- contextConfigLocation参数用来指定Spring的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<!-- 配置spring核心监听器，默认会以 applicationContext.xml作为配置文件 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- ContextLoaderListener的作用是什么？ ContextLoaderListener的作用就是启动Web容器时，读取在contextConfigLocation中定义的xml文件，自动装配ApplicationContext的配置信息，并产生WebApplicationContext对象，然后将这个对象放置在ServletContext的属性里，这样我们只要得到Servlet就可以得到WebApplicationContext对象，并利用这个对象访问spring容器管理的bean。 
		简单来说，就是上面这段配置为项目提供了spring支持，初始化了Ioc容器。 
    -->
    
   <!-- 2.Spring MVC servlet 配置 -->
   <!-- 配置一个servlet -->
   <servlet>
     <!-- servlet的内部名称，自定义。尽量有意义 -->
     <servlet-name>springMvc</servlet-name>
     <!-- servlet的类全名：包名+简单类名 -->
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <!-- 初始化参数，指定 Spring MVC servlet配置文件-->
     <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-servlet.xml</param-value>
    </init-param>
   </servlet>
   <!-- servlet的映射配置-->
   <servlet-mapping>
     <!-- servlet的内部名称，一定要和上面的内部名称一致 -->
     <servlet-name>springMvc</servlet-name>
     <!-- servlet的映射路径（访问servlet的名称） -->
     <url-pattern>/</url-pattern>
   </servlet-mapping>
   
   <!-- 
   web.xml是用来初始化配置信息：比如Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等。
    -->
   <!-- 
    3.配置shiroFilter 
     3.1 DelegatingFilterProxy实际上是Filter的一个代理对象。默认情况下，spring 会到IOC容器中查找
     	和 <filter-name>对应的filter bean。也可以通过targetBeanName的初始化参数来设置filter bean 的id。
   --> 
   <!-- Shiro Filter is defined in the spring application context: -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>