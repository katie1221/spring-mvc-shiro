<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
   <!-- 
   1.配置securityManager 
   
   -->
   <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 验证策略-->
        <property name="authenticator" ref="authenticator"/>
        <!-- 配置多个Realm,其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
        <property name="realms">
	       <list>
		   	 <!-- 这个认证，有一个先后的顺序：从上往下 -->
		   	 <ref bean="jdbcRealm"/>
		   	 <ref bean="secondRealm"/>
		   </list>	
        </property>
        <!-- 修改 rememberMe的过期时间，单位是秒-->
        <property name="rememberMeManager.cookie.maxAge" value="10"></property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 
     2.配置 cacheManager
       2.1需要加入ehcache的jar和配置文件
     -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <!--  -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    
    <!-- 认证策略 -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
	   <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
	   <property name="authenticationStrategy">
	     <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
	   </property>
	</bean>
    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!-- 
      3.配置Realm
        3.1直接配置实现了org.apache.shiro.realm.Realm接口的bean
     -->
    <bean id="jdbcRealm" class="com.example.shiro.realms.ShiroRealm">
      <!-- 配置凭证匹配器 -->
      <!-- 加入了密码匹配器之后，就会默认将前台传递过来的密码自动MD5加密  -->
      <property name="credentialsMatcher">
        <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
          <!-- 加密的算法-->
          <property name="hashAlgorithmName" value="MD5"></property>
          <!-- 加密的次数 -->
          <property name="hashIterations" value="1024"></property>
        </bean>
      </property>
    </bean>
    <!--配置第2个Realm  -->
    <bean id="secondRealm" class="com.example.shiro.realms.SecondRealm">
      <!-- 配置凭证匹配器 -->
      <property name="credentialsMatcher">
        <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
          <!-- 加密的算法-->
          <property name="hashAlgorithmName" value="SHA1"></property>
          <!-- 加密的次数 -->
          <property name="hashIterations" value="1024"></property>
        </bean>
      </property>
    </bean>
    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 
    4.配置 LifecycleBeanPostProcessor。可以自动的来调用配置在Spring IOC 容器中shiro bean的生命周期方法
    -->     
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 
    5.启用IOC容器中使用shiro的注解。但是必须在配置了 LifecycleBeanPostProcessor之后才可以使用
    -->     
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
          <!-- 必须使用cglib方式为Action对象创建代理对象 -->
          <property name="proxyTargetClass" value="true" />
    </bean>      
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 
    6.配置ShiroFilter
      6.1 id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致。
      若不一致，则会抛出：NoSuchBeanDefinitionException。因为Shiro会来 IOC容器中查找和<filter-name>名字对应的filter bean。	
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/toLogin"/>
        <property name="successUrl" value="/list"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- 3.权限过滤栈 -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        <!-- 
                                配置哪些页面需要受保护。
                                以及访问这些页面需要的权限
           1)  anon 可以匿名访问
           2)  authc 必须认证（即登录）  之后才可以访问    
           3)  logout:登出
           4)  roles 角色过滤器
         -->
        <!-- <property name="filterChainDefinitions">
            <value>
                /toLogin = anon
                /login = anon
                /logout = logout
                
                /toAdmin = roles[admin]
                /toUser = roles[user]
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property> -->
    </bean>
    
    <!-- 配置一个bean,该bean实际上是一个map。通过实例工厂方法的方式 -->
    <!-- 2.实例 -->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="builderFilterChainDefinitionMap"></bean>
    <!-- 1.实例工厂类 -->
    <bean id="filterChainDefinitionMapBuilder" class="com.example.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
    
    
    <bean id="shiroService" class="com.example.shiro.service.ShiroService"></bean>
    <!-- <bean id="shiroHandlerController" class="com.example.shiro.controller.ShiroHandlerController"></bean> -->

<!--     Session ID 生成器
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>

    Session DAO. 继承EnterpriseCacheSessionDAO
    <bean id="sessionDAO" class="com.example.shiro.session.MySessionDAO">
       <property name="activeSessionsCacheName" value="shiro-activeSessionsCache"></property>
       Session ID 生成器
       <property name="sessionIdGenerator" value="sessionIdGenerator"></property>
    </bean>
    
    会话管理器
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
       session 有效时间为半小时（毫秒单位）
       <property name="globalSessionTimeout" value="1800000"></property>
       是否删除无效的，默认开启
       <property name="deleteInvalidSessions" value="true"></property>
       是否开启 检测，默认开启
       <property name="sessionValidationSchedulerEnabled" value="true"></property>
       <property name="sessionDAO" ref="sessionDAO"></property>
    </bean> -->
    
</beans>
